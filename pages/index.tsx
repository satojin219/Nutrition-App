import type { NextPage } from "next";
import React, { useContext, useMemo, useState } from "react";
import { DayContext } from "./_app";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { Header } from "../components/common/Header";
import { DailylIntakeNutrition } from "../components/index/DailylIntakeNutrition";
import { DishCard } from "../components/index/DishCard";
import { SuggestFood } from "../components/editMenu/SuggestFood";
import { UserData, dayData, Meal } from "globalType";
import { useSelectDay } from "../hooks/useSelectDay";
import classnames from "classnames";

type isFixedContextType = {
  isModalShow: boolean;
  setIsModalShow: React.Dispatch<React.SetStateAction<boolean>>;
};
export const isModalShowContext = React.createContext({} as isFixedContextType);

const Home: NextPage = () => {
  const dayContext = useContext(DayContext);
  const meals = useMemo(() => {
    dayContext.selectedDayData.meals = [
      { whenMeal: "breakfast" },
      { whenMeal: "lunch" },
      { whenMeal: "dinner" },
      { whenMeal: "snack" },
    ];
    return dayContext.selectedDayData.meals;
  }, [dayContext]);
  const [isModalShow, setIsModalShow] = useState(false);
  const value = {
    isModalShow,
    setIsModalShow,
  };
  const fixedClassNames = {
    fixed: isModalShow,
  };
  return (
    <div className={classnames(fixedClassNames, "font-fancy")}>
      <Head>
        <title>Nutrition App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com"></link>
        <link
          href="https://fonts.googleapis.com/css2?family=Kiwi+Maru:wght@500&family=Yomogi&family=Zen+Maru+Gothic:wght@900&display=swap"
          rel="stylesheet"
        ></link>
      </Head>
      <isModalShowContext.Provider value={value}>
        {/* <Header meal={""} isEdit={false} date={dayContext.selectedDayData.selectedDay} /> */}
        <Header meal={""} isEdit={false} />
        {/* <DailylIntakeNutrition totalIntake={dayContext.selectedDayData.totalIntake} /> */}
        <DailylIntakeNutrition />
        <div className="lg:flex flex-wrap">
          {meals.map((meal: Meal, index: number) => (
            <DishCard meal={meal} key={index} />
          ))}
        </div>
      </isModalShowContext.Provider>
    </div>
  );
};

// export const getServerSideProps: GetServerSideProps = async (context) => {
//   const res: Response = await fetch("http://localhost:3000//api/getDishData");
//   const posts = await res.json();
//   console.log(posts);
//   return { props: { posts } };
// };
export default Home;
